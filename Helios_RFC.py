from datetime import datetime
import numpy as np
import random
import json
from sklearn.ensemble import RandomForestClassifier

import Helios

class Helios_RFC:

    def __init__(self):
        self._precision = 7
        self._debug = False
        self.helios = Helios.Helios()
        self.data = self._get_db_data()
        self.rfc = RandomForestClassifier()
        self.locations = self._get_loc_set()

    def train(self):
        """
        trains sklearn's implementation of a Ramdom Forest Classifier on data generated by
        _get_train_array()
        """
        self.log("train")

        X_train, y_train = self._get_train_data()
        self.rfc.fit(X_train, np.ravel(y_train))

    def predict_all_at_specified_time(self, prediction_time):
        """
        returns an array that contains arrays that each have a geohash, timestamp and
        predicted number of incidents
        """
        self.log("predict_all_at_specified_time")

        predictions = []
        if type(prediction_time) == datetime:
            hour = datetime.hour
        else:
            hour = prediction_time
            today = datetime.utcnow().date()
            prediction_time = datetime(today.year, today.month, today.day, hour)
        for loc_num in self.locations:
            s = "/Date" + str(self.time_to_millis(prediction_time)) + ")/"
            prediction = {
                'incidentId': int(random.random() * 10000000),
                'point': self.locations[loc_num],
                'toPoint': self.locations[loc_num],
                'start': s,
                'severity': int(self._predict(loc_num, hour)),  # number of incidents at geohash
                'projection': True,
            }
            predictions.append(prediction)
        return predictions

    def send_predictions_to_mongo(self, predictions):
        self.log("send_predictions_to mongo" + "First prediction:" + str(predictions[0]))
        for prediction in predictions:
            self.helios.safeInsert(json.loads(json.dumps(prediction)))
    
    def _get_loc_set(self):
        """
        private method that creates a set containing all unique geohashes in database at a
        certain precision level
        """
        self.log("get_loc_set")

        locations = {}
        for i, data in enumerate(self.data):
            locations[i] = data['geoHash'][:self._precision]
        return locations

    def _get_data_by_hour(self, geoHash):
        """
        private method that At every location make fill an array that represents hours in a
        day with the number of incidents that occurred within that hour
        """
        self.log("get_data_by_hour")

        d = [0 for _ in range(24)]
        for item in self.data:
            if item['geoHash'] == geoHash:
                d[item['start'].hour & 24] += 1
        return d

    def _get_train_data(self):
        """
        private method that creates arrays used to train RFC using data from self.data,
        additional data can be added in the future
        """
        self.log("get_train_array")

        X_train = []
        y_train = []
        for loc_num in self.locations:
            for hour, incidents in enumerate(self._get_data_by_hour(self.locations[loc_num])):
                X_train.append([loc_num, hour])
                y_train.append([incidents])
        return X_train, y_train

    def _get_db_data(self):
        """
        private method that loads all data from mongo db into self.data not all parameters
        loaded are used
        """
        self.log("_get_db_data")

        data = []
        cursor = self.helios.col.find({"projection": {"$exists": False}})
        for entry in cursor:
            element = {
                'start': self.millis_to_time(int(entry['start'][6:-2])),
                'end': self.millis_to_time(int(entry['end'][6:-2])),
                'type': entry['type'],
                'severity': entry['severity'],
                'roadClosed': entry['roadClosed'],
                'geoHash': entry['point']['geohash'][:7]
            }
            data.append(element)
        return data

    def _predict(self, geohash_num, hour):
        """
        private method that takes a number which is a key for a specific geohash and the hour of the
         day for the prediction and returns the predicted number of incidences
        """
        self.log("_predict()")

        return self.rfc.predict([[geohash_num, hour]])[0]

    def _query_bing(self, location):
        """Only used to get test data on personal computer"""
        self.log("query_bing")
        self.helios.loadMapData(False, None, location)

    def millis_to_time(self, millis):
        """
        Converts milliseconds to python datetime
        """
        self.log("millis_to_time")
    
        return datetime.fromtimestamp(millis / 1000.0)
    
    def time_to_millis(self, time):
        """
        Converts python datetime to milliseconds
        """
        self.log("time_to_millis")
        
        epoch = datetime.utcfromtimestamp(0)
        return (time - epoch).total_seconds() * 1000.0
    
    def log(self, s):
        if self._debug:
            print(s)


if __name__ == "__main__":
    p = Helios_RFC()
    p.train()
    idata = p.predict_all_at_specified_time(8)
    print("test prediction: " + str(idata[0]))

    p.send_predictions_to_mongo(idata)
    


